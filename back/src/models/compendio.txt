// src/models/Agenda.js
const mongoose = require('mongoose');
const agendaSchema = new mongoose.Schema({
  title: { type: String, required: true },
  date: { type: Date, required: true, index: true }, // Agregado índice para búsquedas rápidas
  description: { type: String },
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }, // Asegurar que cada agenda tenga un creador
}, { timestamps: true });
module.exports = mongoose.model('Agenda', agendaSchema);

// models/Cliente.js
const ClienteSchema = new mongoose.Schema({
    nombre_cliente: String,
    direccion_cliente: String,
    ciudad_estado_cliente: String,
    telefono_cliente: String,
    email_cliente: String
});
module.exports = mongoose.model('Cliente', ClienteSchema);

// Cotizaciones
const CotizacionSchema = new mongoose.Schema({
    id_cotizacion: { type: Number, required: true, unique: true },
    fecha_cotizacion: Date,
    validez_cotizacion: Date,
    subtotal_cotizacion: Number,
    costo_smart_cotizacion: Number,
    utilidad_cotizacion: Number,
    descuento_cotizacion: Number,
    total_sin_financiamiento_cotizacion: Number,
    total_con_financiamiento_cotizacion: Number,
    anticipo_cotizacion: Number,
    financiamiento_cotizacion: Number,
    cantidad_plazos_cotizacion: Number,
    cantidad_a_pagar_plazos_cotizacion: Number,
    id_cliente: { type: Number, ref: 'Cliente' }
});

// Detalle Cotizaciones
const DetalleCotizacionSchema = new mongoose.Schema({
    id_detalle_cotizacion: { type: Number, required: true, unique: true },
    codigo_detalle_cotizacion: String,
    descripcion_detalle_cotizacion: String,
    precio_unitario_detalle_cotizacion: Number,
    unidades_detalle_cotizacion: Number,
    precio_total_detalle_cotizacion: Number,
    costo_smart_detalle_cotizacion: Number
});

// models/EstadoCuenta.js
const mongoose = require('mongoose');
const EstadoCuentaSchema = new mongoose.Schema({
    total_estado_cuenta: Number,
    anticipo_estado_cuenta: Number,
    restante: Number,
    cantidad_semanas: Number,
    dia_pago: String,
    metodo_pago: String,
    recargo_impuntualidad: Number,
    id_cotizacion: { type: mongoose.Schema.Types.ObjectId, ref: 'Cotizacion' }
});
module.exports = mongoose.model('EstadoCuenta', EstadoCuentaSchema);

// models/Filial.js
const FilialSchema = new mongoose.Schema({
    nombre_filial: String,
    slug_filial: String,
    imagen_filial: String,
    cotizaciones: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Cotizacion' }]
});
module.exports = mongoose.model('Filial', FilialSchema);

// Gastos
const GastoSchema = new mongoose.Schema({
    descripcion: String,
    monto: Number,
    fecha: Date
});

// models/ProductoServicio.js
const ProductoServicioSchema = new mongoose.Schema({
    codigo_productoservicio: String,
    descripcion_productoservicio: String,
    producto_productoservicio: Boolean,
    categoria_productoservicio: String,
    servicio_productoservicio: Boolean,
    precio_compra_productoservicio: Number,
    sin_financiamiento_productoservicio: Number,
    con_financiamiento_productoservicio: Number,
    seccion_productoservicio: String,
    subseccion_productoservicio: String,
    status_productoservicio: String
});
module.exports = mongoose.model('ProductoServicio', ProductoServicioSchema);

// Productos Vendidos
const ProductoVendidoSchema = new mongoose.Schema({
    id_producto_vendido: { type: Number, required: true, unique: true },
    codigo: String,
    descripcion: String,
    preciosmart: Number,
    cantidad: Number,
    preciototalsmart: Number,
    precioventa: Number,
    preciototalventa: Number,
    existente: Boolean,
    id_cotizacion: { type: Number, ref: 'Cotizacion' }
});

// Productos y Servicios
const ProductoServicioSchema = new mongoose.Schema({
    id_productoservicio: { type: Number, required: true, unique: true },
    codigo_productoservicio: String,
    descripcion_productoservicio: String,
    producto_productoservicio: Boolean,
    categoria_productoservicio: String,
    servicio_productoservicio: Boolean,
    precio_compra_productoservicio: Number,
    sin_financiamiento_productoservicio: Number,
    con_financiamiento_productoservicio: Number,
    seccion_productoservicio: String,
    subseccion_productoservicio: String,
    status_productoservicio: String
});

// src/models/RefreshTokens
const mongoose = require('mongoose');
const RefreshTokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true, unique: true }, // Asegurar que cada token sea único
    expiresAt: { type: Date, required: true, index: true } // Índice para mejorar rendimiento
});
module.exports = mongoose.model('RefreshToken', RefreshTokenSchema);

// src/models/Task
const mongoose = require('mongoose');
const taskSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String },
  assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User', index: true }, // Agregado índice
  status: { type: String, enum: ['Pendiente', 'En progreso', 'Completada'], default: 'Pendiente' },
  priority: { type: String, enum: ['Baja', 'Media', 'Alta'], default: 'Media' },
  dueDate: { type: Date },
  progress: { type: Number, min: 0, max: 100, default: 0 }, // Nuevo campo para progreso de la tarea
}, { timestamps: true });
module.exports = mongoose.model('Task', taskSchema);

// src/models/Timeline
const mongoose = require('mongoose');
const timelineSchema = new mongoose.Schema({
  event: { type: String, required: true },
  description: { type: String }, // Nuevo campo opcional
  timestamp: { type: Date, default: Date.now, index: true }, // Índice para búsquedas más rápidas
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
}, { timestamps: true });
module.exports = mongoose.model('Timeline', timelineSchema);

// Tipos de Usuarios
const TipoUsuarioSchema = new mongoose.Schema({
    id_tipo_usuario: { type: Number, required: true, unique: true },
    tipo_usuario: String,
    lineas_verificentro: [String]
});

// src/models/User
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const UserSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true, index: true }, // Agregado índice
    password: { type: String, required: true },
    role: { type: String, enum: ['super_user', 'admin', 'user'], default: 'user' }
});
// Prevenir re-hashing innecesario de la contraseña
UserSchema.pre('save', async function(next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});
module.exports = mongoose.model('User', UserSchema);

// src/models/Wiki
const mongoose = require('mongoose');
const wikiSchema = new mongoose.Schema({
  title: { type: String, required: true, index: true }, // Índice agregado
  content: { type: String, required: true },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
}, { timestamps: true });
module.exports = mongoose.model('Wiki', wikiSchema);