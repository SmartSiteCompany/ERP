// routes/admin.js
const express = require('express');
const { createTaskHandler, getTasksHandler } = require('../controllers/adminController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.post('/tasks', authMiddleware.authenticateToken, createTaskHandler);
router.get('/tasks', authMiddleware.authenticateToken, getTasksHandler);

module.exports = router;

//routes/auth
const express = require('express');
const authService = require('../services/authService');
const router = express.Router();

router.post('/register', async (req, res) => {
    try {
        const user = await authService.register(req.body);
        res.status(201).json({ message: 'Usuario registrado', user });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

router.post('/login', async (req, res) => {
    try {
        const tokens = await authService.login(req.body);
        res.json(tokens);
    } catch (error) {
        res.status(401).json({ error: error.message });
    }
});

router.post('/refresh', async (req, res) => {
    try {
        const accessToken = await authService.refreshToken(req.body.token);
        res.json({ accessToken });
    } catch (error) {
        res.status(403).json({ error: error.message });
    }
});

router.post('/logout', async (req, res) => {
    try {
        await authService.logout(req.body.token);
        res.json({ message: 'SesiÃ³n cerrada' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

// routes/authRoutes.js
const express = require('express');
const bcrypt = require('bcrypt');
const User = require('../models/User');

const router = express.Router();

router.post('/register', async (req, res) => {
    try {
        const { username, password, role } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: 'Faltan datos' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ username, password: hashedPassword, role });

        await user.save();
        res.json({ message: 'Registro exitoso' });
    } catch (err) {
        res.status(500).json({ error: 'Error en el registro' });
    }
});

module.exports = router;
